import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import fetchService from "../../services/fetchService";
import { adaptCharactersResponse } from "./adapter";
const initialState = {
  charactersData: {},
  loading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCharactersData = createAsyncThunk(
  "characters/fetchData",
  async (url) => {
    // const response = await fetchCharacters();
    // // The value we return becomes the `fulfilled` action payload
    // return response.data;
    const response = await fetchService.get("people");
    // The value we return becomes the `fulfilled` action payload
    const adaptedData = adaptCharactersResponse(response.data);

    return adaptedData;
  }
);

export const charactersSlice = createSlice({
  name: "characters",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCharactersData.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchCharactersData.fulfilled, (state, action) => {
        state.loading = false;
        state.charactersData = action.payload;
      })
      .addCase(fetchCharactersData.rejected, (state, action) => {
        state.loading = false;
        state.charactersData = {};
      });
  },
});

//export const {} = charactersSlice.actions;

export const selectCount = (state) => state.counter.value;

export default charactersSlice.reducer;
